{
  "hash": "cbb6b3b6911dd94c89e19b13ef0f0c5c",
  "result": {
    "markdown": "---\ntitle: \"Summary\"\neditor: visual\n---\n\n::: {.cell}\n\n:::\n\n\nOver the past four days we have covered quite a bit of ground. By now it is our hope that after having participated in this workshop you will feel confident enough using R to branch out on your own and begin applying what you have learned to your own research.\n\nAbove all, remember the tidy principles you have leaned here and endeavour to apply them to all facets of your work. The more uniformly tidy your work becomes, the more compounding benefits you will begin to notice.\n\n\n## The future\n\nThe content we have covered in this workshop is only the beginning. We have looked down upon the tidyverse, it's multitudinous spiralling arms stretching out away from us in all directions. The next step is to begin to investigate the specific branches of the R tree of knowledge that interest us most. Or are most relevant to our work. The following list contains some further suggestions for workshops that are available:\n\n* R for biologists\n* R for environmental science\n* R for oceanographers\n* Advanced visualisations\n* Multivariate analysis\n* Species distribution modelling\n* Reproducible research\n* Basic stats\n\nFor further information or inquiries about additional training please contact Robert Schlegel: robwschlegel@gmail.com .\n\n## Today\n\nFor the rest of today we will now open the floor to questions and suggestions that we may work through as a group.\n\n# Functions by chapter {-}\n\n## Useful information\n\n### Operators\n\nThere are several operators you can use to help build expressions as shown in Table \\ref{tab:operators}.\n\n\\begin{table}[htbp]\n\\begin{small}\n\\begin{center}\n\\caption{Logical operators for use in R.}\n\\label{tab:operators}\n\\newcolumntype{R}{>{\\raggedright\\arraybackslash}X}%\n\\begin{tabularx}{\\textwidth}{l X l}\n\\toprule\nOperator & Meaning & Example \\\\\n\\midrule\n\\texttt{\\textless{}} & less than & \\texttt{x\\ \\textless{}\\ 3} \\\\\n\\texttt{\\textgreater{}} & greater than & \\texttt{x\\ \\textgreater{}\\ 5} \\\\\n\\texttt{\\textgreater{}=} & greater than or equal to & \\texttt{x\\ \\textgreater{}=\\ 24} \\\\\n\\texttt{\\textless{}=} & less than or equal to & \\texttt{x\\ \\textless{}=\\ 19} \\\\\n\\texttt{==} & exactly equal to & \\texttt{x\\ ==\\ 666} \\\\\n\\texttt{!=} & not equal to & \\texttt{x\\ !=\\ 777} \\\\\n\\texttt{\\&} & AND; returns TRUE if statements on both sides of the \\texttt{\\&} are TRUE & \\texttt{(x\\ \\textgreater{}\\ 3)\\ \\&\\ (y\\ !=\\ 5)} \\\\\n\\texttt{\\textbar{}} & OR; the pipe symbol \\texttt{\\textbar{}}; TRUE if a statement on either side of the \\texttt{\\textbar{}} is TRUE & \\texttt{(x\\ \\textless{}\\ 10)\\ \\textbar{}\\ (x\\ \\textgreater{}\\ 20)} \\\\\n\\bottomrule\n\\end{tabularx}\n\\end{center}\n\\end{small}\n\\end{table}\n\n\\begin{mybox}{}{Question}\nThe logical AND: If we had said \\texttt{subset(dat, site == \"Kommetjie\" \\& site == \"Baboon\")}, what would have happened? Why? Try it and see...\n\\end{mybox}\n\n### Functions\n\nSome example functions covered so far are presented in Table \\ref{tab:functions}.\n\n\\begin{table}[htbp]\n\\begin{small}\n\\begin{center}\n\\caption{Common functions used for daily work in R.}\n\\label{tab:functions}\n\\newcolumntype{R}{>{\\raggedright\\arraybackslash}X}%\n\\begin{tabularx}{\\textwidth}{R  l  R  R }\n\\toprule\n\\textbf{Type} & \\textbf{Function} & \\textbf{What it does} & \\textbf{Syntax} \\\\\n\\midrule\nChecking a dataframe & \\texttt{class()} & Gives the class (type of data structure) of the object & \\texttt{class(dat)} \\\\\nNumerical calculations & \\texttt{mean()}, \\texttt{sd()} & Calculations on a numerical R object (variables, vectors, arrays) & \\texttt{mean(dat\\$var)} \\\\\nGets working directory & \\texttt{getwd()} & Gets current working directory & \\texttt{getwd()} \\\\\nSets working directory & \\texttt{setwd()} & Sets working directory to specified path & \\texttt{setwd(\"yourpath\")} \\\\\nGetting your data into R & \\texttt{read.table()} & Reads file in table format (with specified separator sep) and creates a dataframe from it & \\texttt{read.table(\"filename.csv\", header= TRUE, sep = \",\")} \\\\\nGetting .csv file into R & \\texttt{read.csv()} & Reads in .csv file to a dataframe; as above, but `sep' predefined & \\texttt{read.csv(\"filename.csv\", header= TRUE)} \\\\\nList variables & \\texttt{ls()}  & Lists objects in memory & \\texttt{ls()} \\\\\nVariable names in dataframe & \\texttt{names()} & Gives variable names & \\texttt{names(dat)} \\\\\nSubsetting a dataframe & \\texttt{subset()} & Subset a dataframe & \\texttt{subset(dat, Var1 == \"Low\" | Var2 <= 5)} \\\\\nCleaning up & \\texttt{rm()} & Removes object(s) from the Environment & \\texttt{rm(object\\_name)}; \\texttt{rm(list = ls())} \\\\\n\\bottomrule\n\\end{tabularx}\n\\end{center}\n\\end{small}\n\\end{table}\n\nSome summary functions are presented in Table \\ref{tab:summaries}.\n\n\\begin{table}[htbp]\n\\begin{small}\n\\begin{center}\n\\caption{Commonly used and useful summary functions.}\n\\label{tab:summaries}\n\\newcolumntype{R}{>{\\raggedright\\arraybackslash}X}%\n\\begin{tabularx}{\\textwidth}{R  R  R  X }\n\\toprule\n\\textbf{Type} & \\textbf{Function} & \\textbf{What it does} & \\textbf{Syntax} \\\\\n\\midrule\nSpecifying variable in dataframe & \\texttt{\\$} & Gives the class (type of data structure) of the object & \\texttt{dat\\$blade\\_length} \\\\\n & \\texttt{str()} & Lists variables in your object by name, their data type (continuous, factor) and an indication of the actual data & \\texttt{str(dat)} \\\\\n& \\texttt{head()} & Gives first 6 rows of a dataframe, or number of rows (\\texttt{n}) specified & \\texttt{head(dat, 20)} \\\\\n& \\texttt{tail()} & Gives last 6 (or \\texttt{n}) rows of a dataframe & \\texttt{tail(dat, 10)} \\\\\n& \\texttt{names()} & Gives variable names & \\texttt{names(dat)} \\\\\n& \\texttt{summary()} & Tabulates variables in dataframe and provides summary statistics & \\texttt{summary(dat)} \\\\\n<!-- & \\texttt{attach()} & Loads dataframe into memory & \\texttt{attach(dat)} \\\\ -->\n<!-- & \\texttt{detach()} & Removes dataframe from memory & \\texttt{detach(dat)} \\\\ -->\n& \\texttt{with()} & Specify a dataframe & \\texttt{with(dat, mean(blade\\_length))} \\\\\nSummary statistics & \\texttt{mean()}, \\texttt{sd()}, \\texttt{range()}, \\texttt{var()} & Calculates particular statistic for a variable. Use \\texttt{na.rm = TRUE} if your data contain \\texttt{NA}s & \\emph{e.g.} \\texttt{mean(dat\\$blade\\_length, na.rm = TRUE)} \\\\\n& \\texttt{length()} & Number of elements in a variable. Use \\texttt{na.omit()} if your data contain \\texttt{NA}s & \\texttt{length(dat\\$blade\\_length)}; \\texttt{length(na.omit(dat\\$blade\\_length))} \\\\\nData manipulation & \\texttt{table()} & Frequency table by variables specified & \\texttt{table(dat\\$site, dat\\$blade\\_length)} \\\\\n& \\texttt{ftable()} & Flat frequency table useful for displaying multidimensional tables & \\texttt{ftable(dat\\$catvar1, dat\\$catvar2, dat\\$catvar3)} \\\\\nSaving an object file & \\texttt{write.csv()} & Save an object to a .csv file & \\texttt{write.csv(sp\\_by\\_site, file = \"Laminaria.csv\", row.names = TRUE)} \\\\\n\\bottomrule\n\\end{tabularx}\n\\end{center}\n\\end{small}\n\\end{table}\n\n# Base R primer {-}\n\nPlease note that the following chapter departs from the syntax employed by the **`tidyverse`**, as utilised throughout this workshop, in favour of the base R syntax. This may be changed in the future, but has been left for now in order to better highlight the fundamental machinations of the R language, upon which the **`tidyverse`** is based.\n\n## Dataframes\n\nThe 'workhorse' data-containing structures you will use extensively in R are called *dataframes*. In fact, almost all of the work you do in R will be done directly with dataframes or will involve converting data into a dataframe. A dataframe is used for storing data as tables, with a table defined by a collection of vectors of similar or dissimilar data types but all of the same length. Don't worry if any of those terms are unknown or daunting. We will cover them in detail just now. But first we need to see what a dataframe looks like in order to provide context for all of the parts they consist of. After we have covered all of the terms used for data in R we will learn some methods of creating our own dataframes.\n\nTo load a dataframe into R is quite simple when the data are already in the '.Rdata' format. Let's load a small dataframe that was prepared for this class and see. The file extension '.Rdata' does not mean necessarily that the data are in a dataframe (table) format. This file extensions is actually a form of data compression unique to R and could hold anything from a single letter to the results of a complex species distribution model. For the following line of code to work we must make sure we are in the 'Intro_R_Workshop' project.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/intro_data.Rdata\")\n```\n:::\n\n\nUpon loading the data frame we see in the **Environment** tab that there is a little blue circle next to our object. If we click on that we see a summary of each column. First it says what the data type for that column is and then shows the first several values therein.\n\nIf you click on the 'intro_data' word in your **Environment** tab it will open it in your **Source Editor** and allow you to click on the columns to organise them by ascending or descending order. Note that this does not change the dataframe, it is only a visual aid.\n\n## Basic data types\nThere are several basic R data types that you frequently encounter in daily work. These include but are not limited to *numeric*, *integer*, *logical*, *character*, *factor* and *date* classes. All of these data types are present in our 'intro_data' dataframe for us to see practical examples. We will create our own examples as we go along.\n\n### Numeric\nNumeric data with decimal values are called *numeric* in R. It is the default computational data type. If we look at our data frame we see that the following columns are numeric: lon, lat, NA.perc, mean, min and max. What sort of data are these?\n\nLet's create our own numeric object by assigning a decimal value to a variable `x` as follows, `x` will be of numeric type:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1.2 # assign 1.2 to x\nx # print the value of x\nclass(x) # what is the class of x?\n```\n:::\n\n\nFurthermore, even if we assign a number to a variable `k` that doesn't have a decimal place, it is still being saved as a numeric value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nk <- 1\nk\nclass(k)\n```\n:::\n\n\nIf we want to really be certain that `k` is or is not an integer we use `is.integer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.integer(k) # is k an integer?\n```\n:::\n\n\n### Integer\nAn *integer* in R is a numeric value that does not have a decimal place. It may only be a round whole number. Integers are often used for count data and when converting qualitative data to numbers for data analysis. In our dataframe we may see that we have two integer columns: depth and length. Why are these integers?\n\nIn order to create your own integer variable(s) in R, we use the `as.integer()`. We can be assured that `y` is indeed an integer by checking with `is.integer()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.integer(13)\ny\nclass(y)\nis.integer(y) # is it an integer?\n```\n:::\n\n\nIf we really have to, we can coerce a numeric value into an integer with the same `as.integer()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nz <- as.integer(pi)\nz\nclass(z)\nis.integer(z) # is it an integer?\n```\n:::\n\n\n### Logical\nThere are several *logic* values in R. We are mostly going to be concerned with the two main values we will be encountering: TRUE and FALSE. Note that all letters must be upper case. In our dataframe we see that only the 'thermo' column is logical. This column tells us whether or not the data were collected with a thermometer or not.\n\nLogical values (`TRUE` or `FALSE`) are often created via comparison between variables:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1; y <- 2 # sample values\nz <- x > y\nz\nclass(z)\n```\n:::\n\n\nIn order to perform logical operations we mostly use `&` (and), `|` (or), and `!` (negation):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nu <- TRUE; v <- FALSE; w <- TRUE; x <- FALSE\nu & v\nu & w\nv & x\nu | v\n!u\n```\n:::\n\n\nAlthough these logical operators can be immensely useful in more advanced R programming, we will not go into too much detail in this introductory course. For more information on the logical operators, see the R help material:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhelp(\"&\")\n```\n:::\n\n\nOne final thing to note about logic in R is that it can be useful to perform arithmetic on logical values. `TRUE` has the value 1, while `FALSE` has value 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(TRUE) # the numeric value of TRUE\nas.integer(FALSE) # the numeric value of FALSE\nsum(as.integer(intro_data$thermo))\n```\n:::\n\n\nWhat is this telling us?\n\n### Character\nIn our dataframe we see that only the 'src' column has the *character* values. This column is showing us which government body etc. collected the data in that row. At the use of a very familiar word, character, one may think this data type must be the most straightforward. This is not necessarily so as character values are used to represent *string* values in R. Because computers do not understand text the same way we do, they tend to handle this information differently. This allows us to do some pretty wild stuff with character values, but we won't be getting into that in this course as it quickly becomes very technical and generally speaking isn't very useful in a daily application.\n\nIf however we wanted to convert an object to a character value we would do so with `as.character()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- as.character(pi)\nclass(d)\n```\n:::\n\n\nThis can be useful if you have data that you want to be characters, but for one reason or another R has decided to make it a different data type.\n\nIf you want to join two character objects they can be concatenated with the `paste()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- \"fluffy\"; b <- \"bunny\"\npaste(a, b)\npaste(a, b, sep = \"-\")\n```\n:::\n\n\nMore functions for string manipulation can be found in the R documentation --- type `help(\"sub\")` at the command prompt. You may also wish to install Hadley Wickham's nifty **`stringr`** package for more cool ways to work with character strings.\n\n### Factor\n*Factor* values are somewhat difficult to explain and often even more difficult to understand. Factor values appear the same as character values when we look at them in a spreadsheet. But they are not the same. This will lead to much wailing and gnashing of teeth. So why then do factors exist and why would we use them? Factors allow us to numerically order names non-alphabetically, for example. This then allows one to order a list of research sites in geographical order. \n\nWe will see many examples of factors during this course but for now look at the 'site' column in our dataframe. If we click on this column a couple of times we see that it reorders all the data based on ascending or descending order of the sites. But that order is not alphabetical, it is based on the *levels* within the factor column. Each factor value in a column is assigned a level integer value (e.g. 1, 2, 3, 4, etc.). If multiple values in a factor column are the same, they receive the same level value as well.\n\nIf we want to see what the levels within a factor column are we use `levels()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(intro_data$site)\n```\n:::\n\n\nWe will discuss in the next session what that `$` means. But for now, are you able to see what the pattern is in the levels of the site listing?\n\nIf we want to create our own factors we will use `as.factor()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- as.factor(letters[1:5])\nlevels(f)\n```\n:::\n\n\nAnd if we want to change the order of our factor levels we use `factor()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- factor(f, levels = c(\"b\", \"a\", \"c\", \"e\", \"d\"))\nlevels(f)\n```\n:::\n\n\nAnother reason for using factors to re-order our data, as we shall see tomorrow, is that this allows us to control the order in which values are plotted.\n\n### Dates\n\n\n::: {.cell}\n\n:::\n\n\n## Vectors\nA vector, by definition, is a one-dimensional sequence of data elements of the same basic type (class). Members in a vector are officially called components. Basically, a vector is a column. Indeed, a dataframe is nothing more than a collection of vectors stuck together. If we wanted to create a vector from our dataframe we would do this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlonely_vector <- intro_data$NA.perc\n```\n:::\n\n\nNotice that we may not click on the object `lonely_vector` in our **Environment** tab. This is because it is no longer two-dimensional. If we want to visualise the data we need to enter it into the console or run it from our script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlonely_vector\n```\n:::\n\n\nLet's create some vectors of our own:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprimes1 <- c(3, 5, 7)\nprimes1\nclass(primes1)\n\np1 <- pi\np2 <- 5\np3 <- 7\n\nprimes2 <- c(p1, p2, p3)\nprimes2\nclass(primes2)\nis.numeric(primes2)\nis.integer(primes2) # integers coerced into floating point numbers\n```\n:::\n\n\nWe can also have vectors of logical values or character strings, and we can use the function `length()` to see how many components each has:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntf <- c(TRUE, FALSE, TRUE, FALSE, FALSE)\ntf\nlength(tf)\ncs <- c(\"Mary\", \"has\", \"a\", \"silly\", \"lamb\")\ncs\nlength(cs)\n```\n:::\n\n\nOf course one would seldom enter data into R using the `c()` (combine) function, but it is useful for short calculations. More often than not one would import data from Excel (urgh!) or something more reputable. The kinds of data one can read into R are remarkable. We will get to that later on.\n\nWe can also combine vectors in many ways, and the simplest way is the append one after the other:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprimes12 <- c(primes1, primes2)\nprimes12\n\nnonSense <- c(primes12, cs)\nnonSense\nclass(nonSense)\n```\n:::\n\n\nIn the code fragment above, notice how the numeric values are being coerced into character strings when the two vectors of dissimilar class are combined. This is necessary so as to maintain the same primitive data type for members in the same vector.\n\n## Vector indices\n\nWhat if we want to extract one or a few components from the vector? Easy... We retrieve values in a vector by declaring an index inside a single square bracket `[]` operator. For example, the following shows how to retrieve a vector component. Since the vector index is 1-based (*i.e.* the first component in a vector is numbered `1`), we use the index position `7` for retrieving the seventh member:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnonSense[7] # find the seventh component in the vector\n# or combine them in interesting ways...\npaste(nonSense[7], nonSense[8], nonSense[4], nonSense[10], \"bunnies\", sep = \" \")\n```\n:::\n\n\nIf the index given is negative, it will remove the value whose position has the same absolute value as the negative index. For example, the following creates a vector slice with the third member removed. However, if an index is out-of-range, a missing value will be reported via the symbol `NA`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(2, 6, 3, 8, 13)\na\na[-3]\na[10]\n```\n:::\n\n\n## Vector creation\n\nR has many funky ways of creating vectors. This process is important to understand because we will need to build on it to create our own dataframes. Here are some examples of vector creation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1:10) # assign them to a variable if you want to...\nseq(from = 0, to = 100, by = 10)\nseq(0, 100, len = 10) # one may omit from and to\nseq(1, 9, by = pi)\nrep(13, times = 13)\nrep(seq(1:5), times = 6)\na <- rnorm(20, mean = 13, sd = 0.13) # random numbers with known mean and sd\nrep(a, 5) # one may omit the times argument\nrep(c(\"A\", \"B\", \"C\"), 3)\nrep(c(\"A\", \"B\", \"C\"), each = 3)\nx <- c(\"01-31-1960\", \"02-13-1960\", \"06-23-1977\", \"01-01-2013\")\nclass(x)\nz <- as.Date(x, \"%m-%d-%Y\")\nclass(z) # introducing the date class\nseq(as.Date(\"2013-12-30\"), as.Date(\"2014-01-04\"), by = \"days\")\nseq(as.Date(\"2013-12-01\"), as.Date(\"2016-01-31\"), by = \"months\")\nseq(as.Date(\"2000/1/1\"), by = \"month\", length.out = 12)\n# and many more...\n```\n:::\n\n\n## Vector arithmetic\n\nArithmetic operations of vectors are performed component-by-component, *i.e.*, componentwise. For example, suppose we have vectors `a` and `b`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 3, 5, 7)\nb <- c(1, 2, 4, 8)\n```\n:::\n\n\nThen we multiply `a` by `5`...\n\n\n::: {.cell}\n\n```{.r .cell-code}\na * 5\n```\n:::\n\n\n... and see that each component of `a` is multiplied by `5`. In other words, the shorter vector (here `5`) is recycled. Now multiply `a` with `b`...\n\n\n::: {.cell}\n\n```{.r .cell-code}\na * b\n```\n:::\n\n\n...and we see that the components in one vector matches those in the other one-for-one. Similarly for subtraction, addition and division, we get new vectors via componentwise operations. Try this here now a few times with your own vectors.\n\nBut what if one vector is somewhat shorter than the other? The *recycling rule* comes into play. If two vectors are of unequal length, the shorter one will be recycled in order to match the longer vector. For example, the following vectors `u` and `v` have different lengths, and their sum is computed by recycling values of the shorter vector `u`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv <- rep(2, len = 13)\nu <- rep(c(1, 20), len = 5)\nv + u\n```\n:::\n\n\n## Dataframe creation\n\nThe most rudimentary way to create a dataframe is to create several vectors and then assemble them into a dataframe using `cbind()` --- this is a function that combines by *c*olumn. For instance:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create three vectors of different types\nvec1 <- rep(c(\"A\", \"B\", \"C\"), each = 5) # a character vector (a facctor)\nvec2 <- seq.Date(from = as.Date(\"1981-01-01\"), by = \"day\", \n                 length.out = length(vec1)) # date vector\nvec3 <- rnorm(n = length(vec1), mean = 0, sd = 0.35) # numeric vector\n# now assemble dataframe\ndf1 <- cbind(vec1, vec2, vec3)\nhead(df1)\n```\n:::\n\n\nAnother way to achieve the same thing is to use the `data.frame()` function that will allow you to achieve all of the above steps at once. Here is the example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- data.frame(vec1 = rep(c(\"A\", \"B\", \"C\"), each = 5),\n                  vec2 = seq.Date(from = as.Date(\"1981-01-01\"), by = \"day\", \n                                  length.out = length(vec1)),\n                  vec3 = rnorm(n = length(vec1), mean = 2, sd = 0.75))\nhead(df2, 2)\n```\n:::\n\n\nWhat about the names of the dataframe that you just created? Are you happy that they are descriptive enough? If you aren't, don't fear. There are several different ways in which we can change it. We can assign the existing separate vectors `vec1`, `vec2` and `vec3` to more user-friendly names using the `data.frame()` function, like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- data.frame(level = vec1,\n                  sample.date = vec2,\n                  measurement = vec3)\nhead(df1, 2)\n```\n:::\n\n\nAnother way is to change the name after you have created the dataframe using the `colnames()` assignment function, as in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(df2) <- c(\"level\", \"sample.date\", \"measurement\")\nhead(df2, 2)\nnames(df2)\n```\n:::\n\n\nDataframes are very versatile and we can do many operations on them. A common requirement is to add a column to a dataframe that contains the outcome of some calculation. We could create a new column in the dataframe 'on the fly', as in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2.1 <- df1 # copy the dataframe\ndf2.1$meas.anom <- df1$measurement - mean(df1$measurement)\ndf2.1$meas.diff <- df2.1$measurement - df2.1$meas.anom\nhead(df2.1, 2)\n```\n:::\n\n\nWe can also combine dataframes in different ways. Perhaps you have two (or more) dataframe that conform to the same layout, *i.e.* they have the same number of columns (although the length of the dataframes may differ), they have the same data type in those columns and the names of those columns are the same. Also, the order of the columns must be identical in all the dataframes. Two separate dataframe with the same structure may, for example, result from two identical experiments that were repeated at different times. We can then stack one on top (*e.g.* combine our experiments) of the other using the *r*ow bind function `rbind()`, as in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(df1) # check the number of rows first\nnrow(df2)\ndf3 <- rbind(df1, df2)\nnrow(df3) # number of rows in the combined dataframe\nhead(df3, 2)\n```\n:::\n\n\nBut now how do we know how the portions of the stacked dataframe relate to the experiments that resulted in the data in the first place? There is no label to distinguish one experiment from the other. We can fix this by adding a new column to the stacked dataframe that contains the coding for the two experiments. We can achieve it like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf3$exp.no <- rep(c(\"exp1\", \"exp2\"), each = nrow(df1))\nhead(df3, 2)\ntail(df3, 2)\n```\n:::\n\n\n\\begin{mybox}{}{DIY: Make your own dataframes}\nFor this task, please create two 'stackable' dataframes, but each with a different number of rows. Then stack them and assign an 'index column' so that the two original dataframes can easily be distinguished from one-another in the combined dataframe.\n\\end{mybox}\n\nWe can combine dataframes in another way --- that is, bind columns side-by-side using the function `cbind()`. We used it before to place vectors of the same length next to each other to create a dataframe. This function is similar to `rbind()`, but where `rbind()` fusses over the names of the columns, `cbind()` does not. What does concern `cbind()`, however, is that the number of rows in the two (or more) dataframes that will be 'glued' side-by-side is the same. Try it yourself with your own dataframes.\n\n## Dataframe indices\nRemember that weird `$` symbol we saw a little while ago? That symbol tells R that you want to see a column (vector) within a dataframe. For example, if we wanted to perform an operation on only one column in `intro_data` in order to ascertain the mean depth (m) of sampling:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(mean(intro_data$depth),2)\n```\n:::\n\n\nIf we want to subset only specific values in a dataframe, as we have seen how to do with vectors, we need to consider that we are now working with two dimensions and not one. We still use `[]` but now we must do a little extra. If we want to see how long the time series for Sodwana is we could do this in several ways, here are the three most common in an improving order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Subset a dataframe using [,]\nintro_data[12,9]\n\n# Subset only one column using []\nintro_data$length[12]\n\n# Subset from one column using logic for another column\nintro_data$length[intro_data$site == \"Sodwana\"]\n```\n:::\n\n\nThe important thing to remember here is that when one needs to use a comma when subsetting, the row number is always on the left, and the column number is always on the right. Rows then columns! Tattoo that onto your brain. Or fore-arm if you are the adventurous type. We will go into the subsetting and analysis of dataframes in much more detail in the following session.\n\nOne must keep in mind that data in R can become substantially more complex than what we have covered, and the software also distinguishes several other kinds of data 'containers': in addition to vectors and dataframes, we also have *lists*, *matrices*, *time series* and *arrays*. The more complex ones, such as arrays, may have more dimensions than the two (rows along dimension 1, columns along dimension 2) that most people are familiar with. We will not delve into these here as they are bit more advanced than the goals of this course.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}